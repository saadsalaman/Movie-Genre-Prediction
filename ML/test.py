# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jBdUkPhMKO4xLAw79XWCxMBOGYmkqhgb
"""

import sys

if len(sys.argv) > 1:
    input_sentence = sys.argv[1]
else:
    input_sentence = input("Enter Youtube trailer link: ")


# sys.stdout = open('/dev/null', 'w')
# sys.stderr = open('/dev/null', 'w')


import pickle
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
import string
from sklearn.feature_extraction.text import TfidfVectorizer

import yt_dlp

import whisper
# Load the saved model
model = pickle.load(open('model.pkl', 'rb'))

#load multi labe binaryizer
mbl=pickle.load(open('mlb.pkl', 'rb'))

# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Define a function to preprocess the input sentence
def preprocess_text(text):
    tokens = word_tokenize(text)
    tokens = [word.lower() for word in tokens if word not in string.punctuation]
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    stemmer = PorterStemmer()
    stemmed_tokens = [stemmer.stem(word) for word in tokens]
    return " ".join(stemmed_tokens)
def download_audio(youtube_url, output_path):
    ydl_opts = {
        'format': 'bestaudio/best',  # Specify best audio format
        'outtmpl': output_path,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',  # Extract audio
            'preferredcodec': 'mp3',  # Specify preferred audio codec
            'preferredquality': '192',  # Specify preferred audio quality
        }],
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([youtube_url])

def transcribe(link):
  audio_file_path='video.mp3'
  download_audio(link, audio_file_path)
  model = whisper.load_model("base")
  # Transcribe the audio file
  transcription = model.transcribe(audio_file_path+".mp3")
  # Print the transcribed text
  return transcription['text']
# Input sentence
#input_sentence = "The World When the world is the target, 72 hours ago a secret weapon system was detonated over seven hours. And the threat is real. Go to an eye exists, a radiation surge that destroys everything with an electronic circuit. You can still depend on one man. I want you to find gold, and I find who to get to and stop it. One. Name's Bond. James Bond. The world's most famous secret agent is back. We're into police. And this time 007 is facing the ultimate enemy. The man who knows him best. Hello James. What an unpleasant surprise. 006. What's the matter? No, Pithy Kondak. He was a friend. And now is your enemy and you will kill him. Is the satellite in range? Target is London. Now, the entire world is about to be caught in the crossfire. See you in hell, James. You first. Chili. The pleasure will be on mine. Do you check her out? Ah! How to tell? Three tricks. Arms the fuse. Don't say it. The writings on the wall? Grow up. No, sir. I think you're a sexist, misogynist, dinosaur, a relic of the gold wall. You know James? I was always better. More the fuel. Stop. You look. Voice with toys. Trick is the quit while you're still here. I wouldn't sing of it. The warning sophisticated secret agent. Shaken, but not disturbed. Give us out of here. Bond. Only Bond. Man just won't take a hint. He can't meet the gun. That depends on your definition of safe sex. On November 17th. Running! United artist brings you, trust me. James Bond. We're going to be a good boy and die. That's one trick I've never learned. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man. You're a real man."

# Preprocess the input sentence

if len(input_sentence)>1:
  processed_input = preprocess_text(transcribe(input_sentence))

  print("Processed Input:", processed_input)

  # Load the vectorizer
  vectorizer = pickle.load(open('vectorizer.pkl', 'rb'))
  # Vectorize the preprocessed input sentence
  input_vectorized = vectorizer.transform([processed_input])

  # Make predictions using the loaded model
  prediction = model.predict(input_vectorized)
  # Print the predicted classes
  sys.stdout = sys.__stdout__
  sys.stderr = sys.__stderr__
  print("Predicted Classes:")
  x=False
  for i, label in enumerate(prediction[0]):
    if label == 1:
      x=True
      print(mbl.classes_[i])
  if not x:
    print("None")
else:
  sys.stdout = sys.__stdout__
  sys.stderr = sys.__stderr__
  print("No input provided.")

